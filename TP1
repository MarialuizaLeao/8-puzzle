import copy
import heapq

from eightPuzzle import eightPuzzle
from node import Node

'''
    Heuristics
'''

def manhattanDistance(grid: list) -> int:
    sum = 0
    for i in range(3):
        for j in range(3):
            if grid[i][j] == 0: continue
            sum += abs(((grid[i][j] - 1) // 3) - i) + abs(((grid[i][j] - 1) % 3) - j)
    return sum

def misplacedTiles(grid: list, right = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]) -> int:
    sum = 0
    for i in range(3):
        for j in range(3):
            if grid[i][j] != right[i][j] and grid[i][j] != 0: sum += 1
    return sum

'''
   Cost functions for the algorithms
'''

# Cost function for iterative deepening search and breadth first search, cost is always 0
def costZero(grid: list, realCost: int): return 0

# Cost function for Uniform Cost Search, cost is the depth of the node
def costNodeDepth(grid: list, realCost: int) -> int: return realCost

# Cost function for Greedy search, cost is the heuristic Manhattan distance cost
def costH1Greedy(grid: list, realCost: int) -> int: return manhattanDistance(grid)

# Cost function for Greedy search, cost is the heuristic misplaced tiles cost
def costH2Greedy(grid: list, realCost: int) -> int: return misplacedTiles(grid)

# Cost function for A* search, cost is the sum of the real cost and the heuristic Manhattan distance cost
def costH1Astar(grid: list, realCost: int) -> int: return realCost + manhattanDistance(grid)

# Cost function for A* search, cost is the sum of the real cost and the heuristic misplaced tiles cost
def costH2Astar(grid: list, realCost: int) -> int: return realCost + misplacedTiles(grid)


'''
    Algorithms
'''

def breadthFirstSearch(puzzle: eightPuzzle) -> (list,list):
    root = Node(puzzle.grid, costZero) # Create the root node
    if root.puzzle.solved(): return root.solution
    frontier = []
    explored = set() # Set of nodes to keep track of parents and avoid cycles and repeated states
    frontier.append(root)
    while frontier:
        node = frontier.pop(0)
        explored.add(node)
        for child in node.nodeChildren():
            # if child is a new state
            if child not in explored and child not in frontier:
                # early test for goal state
                if child.puzzle.solved():
                    return child.solution
                frontier.append(child)
    return ["failure"]

def uniformCostSearch(puzzle: eightPuzzle) -> (list, list):
    root = Node(puzzle.grid, costNodeDepth)
    frontier = []
    heapq.heapify(frontier)
    heapq.heappush(frontier, root)
    explored = dict() # dictionsary of nodes to keep track of parents and avoid cycles and repeated states
    while frontier:
        node = heapq.heappop(frontier)
        if node.puzzle.solved(): return node.solution
        for child in node.nodeChildren():
            # if child is a new state or if it is a repeated state but with a lower cost
            if child not in explored or (child in explored and explored[child] > node):
                explored[child] = node # update parent
                heapq.heappush(frontier, child) # add child to frontier
    return ["failure"]
                
def depthLimitedSearch(puzzle: eightPuzzle, limit: int) -> (list, list):
    root = Node(puzzle.grid, costZero) # create the root node
    frontier = []
    explored = dict() # dictionsary of nodes to keep track of parents and avoid cycles and repeated states
    frontier.append(root)
    gotToLimit = False # flag to check if the search reached the limit
    while frontier:
        node = frontier.pop(-1)
        explored[node] = node
        if node.puzzle.solved(): return node.solution
        if len(node.solution) > limit:
            gotToLimit = True
            continue # if the node is deeper than the limit, skip it
        for child in node.nodeChildren():
            # if child is a new state
            if child not in explored and not child in frontier:
                frontier.append(child)
            # if child is a repeated state but with a lower cost
            elif child in explored and len(explored[child].solution) > len(child.solution):
                explored[child] = child
                frontier.append(child)
    if not gotToLimit: return ["failure"] # if the search didn't reach the limit, return failure
    else: return ["cutoff"] # if the search reached the limit, return cutoff
            
def iterativeDeepeningSearch(puzzle: eightPuzzle) -> (list,list):
    i = 0
    limit = 30 # limit to avoid infinite loops
    while(True):
        # if the search reached the limit, return failure
        if i > limit: return ["failure"]
        # run the depth limited search with the current limit
        solution = depthLimitedSearch(puzzle, i)
        # if the search didn't reach the limit or if it reached the limit but found a solution
        if(solution != ['cutoff']):
            return solution
        i += 1
        
def greedy(puzzle: eightPuzzle) -> (list, list):
    root = Node(puzzle.grid, costH1Greedy) # Create the root node
    frontier = []
    heapq.heapify(frontier)
    heapq.heappush(frontier, root)
    explored = dict() # Dictionary of nodes to keep track of parents and avoid cycles and repeated states
    while frontier:
        node = heapq.heappop(frontier)
        if node.puzzle.solved(): return node.solution
        for child in node.nodeChildren():
            # if child is a new state
            if child not in explored:
                explored[child] = node
                heapq.heappush(frontier, child)
    return ["failure"]
        
def aStar(puzzle: eightPuzzle) -> (list, list):
    root = Node(puzzle.grid, costH1Astar) # Create the root node
    frontier = []
    heapq.heapify(frontier)
    heapq.heappush(frontier, root)
    explored = dict() # Dictionary of nodes to keep track of parents and avoid cycles and repeated states
    while frontier:
        node = heapq.heappop(frontier)
        if node.puzzle.solved(): return node.solution
        for child in node.nodeChildren():
            # if child is a new state
            if child not in explored:
                explored[child] = node
                heapq.heappush(frontier, child)
            # if child is a repeated state but with a lower cost
            elif len(node.solution) < len(explored[child].solution):
                explored[child] = node
                heapq.heappush(frontier, child)
    return ["failure"]
   
def hillClimbing(puzzle: eightPuzzle) -> (list, list):
    root = Node(puzzle.grid, costH1Greedy) # Create the root node
    sideMoves = 5 # Number of side moves allowed
    node = root
    while True:
        neighbor = []
        heapq.heapify(neighbor)
        for child in node.nodeChildren():
            heapq.heappush(neighbor, child)
        bestNeighbor = heapq.heappop(neighbor)
        # if the best neighbot is worse than the current node, return failure or the current node if it is the goal
        if bestNeighbor > node: 
            if node.puzzle.solved(): return node.solution
            else: return ["failure"]
        # if the best neighbor is equal to the current node, decrement the number of side moves allowed
        elif bestNeighbor == node: sideMoves -= 1
        # if the best neighbor is better than the current node, reset the number of side moves allowed
        elif bestNeighbor < node: sideMoves = 5
        # if the number of side moves allowed is 0, return failure or the current node if it is the goal
        if sideMoves == 0:
            if node.puzzle.solved(): return node.solution
            else: return ["failure"]
        node = bestNeighbor # set the current node to the best neighbor
        

'''
    Main
'''
def parseAlgorithm(algorithm: str) -> list:
    if algorithm == 'B':
        return breadthFirstSearch(puzzle)
    elif algorithm == 'I':
        return iterativeDeepeningSearch(puzzle)
    elif algorithm == 'U':
        return uniformCostSearch(puzzle)
    elif algorithm == 'A':
        return aStar(puzzle)
    elif algorithm == 'G':
        return greedy(puzzle)
    elif algorithm == 'H':
        return hillClimbing(puzzle)

def printSolution(solution: list) -> None:
    sol = []
    if printSteps:
        print(len(solution)) 
        print()
        puzzle.printGrid()
        for i in range(len(solution)):
            print()
            puzzle.move(solution[i])
            puzzle.printGrid()
    else:
        for i in range(len(solution)):
            puzzle.move(solution[i])
        puzzle.printGrid()

input = input().split()

algorithm = ""
board = []
printSteps = False

if (len(input) != 10 and len(input) != 11) or input[0] not in ["B", "I", "U", "A", "G", "H"] or (len(input) == 11 and input[-1] != "PRINT") or (len(input) == 10 and input[-1] == "PRINT"):
    print("Invalid input")
    exit()
    
numbers = {"0", "1", "2", "3", "4", "5", "6", "7", "8"}
for i in range(1, 10): 
    if input[i] not in numbers: 
        print("Invalid puzzle"); 
        exit()
    else:
        numbers.remove(input[i])
        
algorithm = input[0]
if input[-1] == "PRINT":
    board = input[1:-1]
    printSteps = True
else: board = input[1:]

puzzleGrid = [[0 for x in range(3)] for y in range(3)]
for i in range(3):
    for j in range(3):
        puzzleGrid[i][j] = int(board[i * 3 + j])
        
puzzle = eightPuzzle(puzzleGrid)
solution = parseAlgorithm(algorithm)
if solution == ["failure"]:
    print("No solution found")
else: printSolution(solution)