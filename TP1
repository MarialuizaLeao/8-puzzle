import copy

from eightPuzzle import eightPuzzle
from bfs import breadthFirstSearch
from ids import iterativeDeepeningSearch
from ucs import uniformCostSearch
from aStar import aStar
from greedy import greedy
from hillClimbing import hillClimbing

solution = []

def parseAlgorithm(algorithm: str) -> list:
    if algorithm == 'B':
        return breadthFirstSearch(puzzle)
    elif algorithm == 'I':
        return iterativeDeepeningSearch(puzzle)
    elif algorithm == 'U':
        return uniformCostSearch(puzzle)
    elif algorithm == 'A':
        return aStar(puzzle)
    elif algorithm == 'G':
        return greedy(puzzle)
    elif algorithm == 'H':
        return hillClimbing(puzzle)

def printSolution(solution: list) -> None:
    sol = []
    if printSteps:
        print(len(solution)) 
        print()
        puzzle.printGrid()
        for i in range(len(solution)):
            print()
            puzzle.move(solution[i])
            puzzle.printGrid()
    else:
        for i in range(len(solution)):
            puzzle.move(solution[i])
        puzzle.printGrid()

input = input().split()
algorithm = ""
board = []
printSteps = False

if (len(input) != 10 and len(input) != 11) or input[0] not in ["B", "I", "U", "A", "G", "H"] or (len(input) == 11 and input[-1] != "PRINT") or (len(input) == 10 and input[-1] == "PRINT"):
    print("Invalid input")
    exit()
numbers = {"0", "1", "2", "3", "4", "5", "6", "7", "8"}
for i in range(1, 10): 
    if input[i] not in numbers: 
        print("Invalid puzzle"); 
        exit()
    else:
        numbers.remove(input[i])
        
algorithm = input[0]
if input[-1] == "PRINT":
    board = input[1:-1]
    printSteps = True
else: board = input[1:]


puzzleGrid = [[0 for x in range(3)] for y in range(3)]

for i in range(3):
    for j in range(3):
        puzzleGrid[i][j] = int(board[i * 3 + j])
        
puzzle = eightPuzzle(puzzleGrid)
solution = parseAlgorithm(algorithm)
if solution == ["failure"]:
    print("No solution found")
else: printSolution(solution)